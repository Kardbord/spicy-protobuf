module protobuf;

import spicy;

# message := (tag value)*
#     A message is encoded as a sequence of zero or more pairs of tags and values.
public type Message = unit {
    message: TagAndValue[] &eod;

    on %done {
        for (val in self.message) {
            print val;
        }
    }
};

type WireType = enum {
    VARINT = 0x00,
    I64    = 0x01,
    LEN    = 0x02,
    SGROUP = 0x03, # deprecated
    EGROUP = 0x04, # deprecated
    I32    = 0x05
};

type TagAndValue = unit {
    tag:   Tag;
    value: Value(self.tag);
};

# tag := (field << 3) | wire_type
#     A tag is a combination of a wire_type, stored in the least significant three bits,
#     and the field number that is defined in the .proto file.
#     Encoded as uint32 varint.
# Example:
#   In the protobuf_udp_addressbook.binpb file, the top level message is a repeated field with
#   a field number of 1. Therefore the tag would be 00001010.
#   [0]0001010 : continuation bit
#   0[0001]010 : varint payload, aka field number
#   00001[010] : wire type (2, which is wire type LEN)
type Tag = unit {
    tag: VarInt &convert=uint32($$.as_unsigned);
    var field_num: uint32;
    var wire_type: WireType;

    on %done {
        # Last three bits are wire type
        self.wire_type = WireType(self.tag & 0x07);
        # Upper bits are field number
        self.field_num = self.tag >> 3;
    }
};

# value := varint      for wire_type == VARINT,
#          i32         for wire_type == I32,
#          i64         for wire_type == I64,
#          len-prefix  for wire_type == LEN,
#          <empty>     for wire_type == SGROUP or EGROUP
#     A value is stored differently depending on the wire_type specified in the tag.
type Value = unit(tag: Tag) {
    switch(tag.wire_type) {
        WireType::VARINT -> varint : VarInt;
        WireType::I32    -> unimpl : bytes &eod;
        WireType::I64    -> unimpl : bytes &eod;
        WireType::LEN    -> unimpl : bytes &eod;
        WireType::SGROUP -> unimpl : bytes &eod;
        WireType::EGROUP -> unimpl : bytes &eod;
        # TODO - Finish switch for other types
    };
};

function parse_varint(buf: vector<uint8>) : uint64 {
    local parsed: uint64 = 0;
    local temp: uint64 = 0;
    while (local i = 0; i < |buf|) {
        # Drop continuation bit
        temp = buf[i] & 0x7F; # Drop continuation bit
        # Convert to big-endian
        parsed = parsed | (temp << (i * 7));
        ++i;
    }
    return parsed;
}

# TODO: Surely there's a better way...
function to_bytes(u: uint64) : bytes {
    local out: bytes;
    out += uint8((u >> 56) & 0xFF);
    out += uint8((u >> 48) & 0xFF);
    out += uint8((u >> 40) & 0xFF);
    out += uint8((u >> 32) & 0xFF);
    out += uint8((u >> 24) & 0xFF);
    out += uint8((u >> 16) & 0xFF);
    out += uint8((u >>  8) & 0xFF);
    out += uint8((u >>  0) & 0xFF);
    return out;
}

# ZigZag encodes positive and negative integers according
# to the following rules:
#   1. If a decimal value (n) is positive, the ZigZag
#      encoding (z) is given by
#      z = 2 * n
#   2. If a decimal value (n) is negative, the ZigZag
#      encoding (z) is given by
#      z = 2 * |n| - 1.
# The implication is that the least-significant bit is the sign-bit.
# This means we can determine how to decode a number using the rules
# above based on whether or not the least-significant bit is set.
# We can decode using the following rules:
#   1. If a ZigZag value (z) does not have the sign bit set,
#      then the decimal representation (n) is given by
#      n = z / 2.
#   2. If a ZigZag value (z) has the sign bit set, then
#      the decimal representation (|n|) is given by
#      |n| = (z + 1) / 2
function parse_zigzag(u: uint64) : int64 {
    if (u & 1 == 0) {
        return to_bytes((u >> 1)).to_int(spicy::ByteOrder::Big);
    }
    return (to_bytes((u + 1) >> 1).to_int(spicy::ByteOrder::Big)) * -1;
}

# varint := int32 | int64 | uint32 | uint64 | bool | enum | sint32 | sint64
#     Encoded as varints (sintN are ZigZag-encoded first).
type VarInt = unit {
    data: uint8[] &until-including=($$ < 0x80) &convert=parse_varint($$);

    # Without the schema for a given message, it is not possible to tell
    # with certainty whether a VarInt is unsigned or signed, and if it is
    # signed, the encoding used. As such, the three possibilities are all
    # presented.
    var as_unsigned        : uint64; # self.data as an unsigned integer
    var as_twos_compliment : int64;  # self.data as a signed integer using two's compliment
    var as_zigzag          : int64;  # self.data as a signed integer using zig-zag encoding

    on %done {
        self.as_unsigned        = self.data;
        self.as_twos_compliment = to_bytes(self.data).to_int(spicy::ByteOrder::Big);
        self.as_zigzag          = parse_zigzag(self.data);
    }
};

# i32 := sfixed32 | fixed32 | float
#     Encoded as 4-byte little-endian.
#     memcpy of the equivalent C types (u?int32_t, float)
type I32 = unit {
    # TODO
};

# i64 := sfixed64 | fixed64 | double
#     Encoded as 8-byte little-endian.
#     memcpy of the equivalent C types (u?int64_t, double)
type I64 = unit {
    # TODO
};

# len-prefix := size (message | string | bytes | packed)
#     A length-prefixed value is stored as a length (encoded as a varint), and then one
#     of the listed data types.
#     Size encoded as int32 varint
type LenPrefix = unit {
    # TODO
};

# string := valid UTF-8 string (e.g. ASCII)
#     As described, a string must use UTF-8 character encoding. A string cannot exceed 2GB.
type String = unit {
    # TODO
};

# bytes := any sequence of 8-bit bytes
#     As described, bytes can store custom data types, up to 2GB in size.
type Bytes = unit {
    # TODO
};

# packed := varint* | i32* | i64*
#     Use the packed data type when you are storing consecutive values of the type described
#     in the protocol definition. The tag is dropped for values after the first, which
#     amortizes the costs of tags to one per field, rather than per element.
type Packed = unit {
    # TODO
};
